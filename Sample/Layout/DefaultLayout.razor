@using Microsoft.AspNetCore.Components.Routing
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
<div class="app-layout @(isNavOpen ? "nav-open" : "")">

  <header class="header">

    <svg class="svg--brand-pggm" width="96" height="65" viewBox="0 0 96 65" xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
      <defs>
        <path id="a" d="M.475.407h57.467v18.557H.475z"></path>
      </defs>
      <g fill="none" fill-rule="evenodd">
        <path
          d="M27.432 39.225C18.612 44.631 11.625 46.422 0 44.926c13.605-1.856 18.13-5.825 28.097-9.392 4.97-1.814 7.265-2.214 9.371-.543-2.833.14-5.248 1.282-10.036 4.234m29.144-14.82C74.133 22.406 83.235 13.892 91.953.168c-13.109 12.94-28.795 17.812-40.99 22.28-5.81 2.144-7.899 5.878-8.438 9.526 2.531-2.868 7.28-6.833 14.05-7.57"
          fill="#898E90"></path>
        <path
          d="M52.485 40.18c-5.567.488-10.988-2.093-15.608-7.326-2.497-2.809-2.946-2.809-6.078-3.934 5.458-1.136 6.927.57 11.515 4.553 2.807 2.011 5.956 3.485 9.042 4.196 5.586.581 10.597-1.378 16.112-2.869.02 0-8.765 4.844-14.983 5.38"
          fill="#898E90"></path>
        <g transform="translate(13.348 45.69)">
          <mask id="b" fill="#fff">
            <use xlink:href="#a"></use>
          </mask>
          <path
            d="M10.06 11.942c3.128 0 6.055-2.113 6.055-5.59 0-3.476-2.927-5.735-6.055-5.735H.48L.476 16.024a2.733 2.733 0 002.734 2.733h2.733v-6.815h4.118zM5.942 8.494V4.142h2.465c1.395 0 2.176.897 2.176 2.176 0 1.28-.78 2.176-2.176 2.176H5.942zm28.184.289a2.733 2.733 0 012.733 2.733l-.004 5.897s-2.96 1.582-7.612 1.582c-6.508 0-10.64-3.696-10.64-8.926 0-7.468 4.991-9.662 10.383-9.662 4.882 0 7.533 1.342 7.533 1.342v4.212s-2.078-1.63-6.281-1.63c-4.204 0-6.044 2.798-6.044 5.594 0 2.796 2.54 5.848 7.9 4.64V8.78l2.032.004m21.083-.001a2.733 2.733 0 012.733 2.733l-.003 5.897s-2.96 1.582-7.613 1.582c-6.508 0-10.639-3.696-10.639-8.926 0-7.468 4.991-9.662 10.382-9.662 4.882 0 7.533 1.342 7.533 1.342v4.212s-2.077-1.63-6.28-1.63c-4.205 0-6.045 2.798-6.045 5.594 0 2.796 2.54 5.848 7.9 4.64V8.78l2.032.004"
            fill="#1D8551" mask="url(#b)"></path>
        </g>
        <path
          d="M85.072 60.044l-4.99-6.088v7.758a2.733 2.733 0 01-2.734 2.733h-2.66v-18.14h4.869l5.675 6.816 5.656-6.816h4.87v15.407a2.734 2.734 0 01-2.733 2.733h-2.66v-10.49l-4.992 6.087h-.301"
          fill="#1D8551"></path>
      </g>
    </svg>

    <button class="hamburger" @onclick="ToggleNavMenu" @onclick:preventDefault="true" aria-label="Toggle navigation menu">
      <span class="screen-reader-text">Menu</span>
      <span class="hamburger-icon">&#9776;</span>
    </button>
  </header>

  <aside class="sidebar">
    <NavMenu />
  </aside>

  <main class="main">
    <div id="main-content">
      @Body

      <footer class="footer">
        <p>&copy; @year PGGM Components. All rights reserved.</p>
      </footer>
    </div>
  </main>

</div>

@code {
  private string year = DateTime.Now.Year.ToString();
  private bool isNavOpen = false;
  private DotNetObjectReference<DefaultLayout>? objRef;
  
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      // Subscribe to navigation changes
      Navigation.LocationChanged += OnLocationChanged;
      
      // Set up JavaScript object reference for resize events
      objRef = DotNetObjectReference.Create(this);
      
      // Register resize event listener
      await JSRuntime.InvokeVoidAsync("blazorCulture.registerResizeHandler", objRef);
    }
  }

  private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    // Close navigation menu when route changes
    if (isNavOpen)
    {
      isNavOpen = false;
      InvokeAsync(StateHasChanged);
    }
  }

  [JSInvokable]
  public async Task OnScreenSizeChanged(bool isLargeScreen)
  {
    // Close navigation menu when screen becomes large (>= 690px)
    if (isLargeScreen && isNavOpen)
    {
      isNavOpen = false;
      await InvokeAsync(StateHasChanged);
    }
  }
  
  private void ToggleNavMenu()
  {
    Console.WriteLine($"ToggleNavMenu called! Current state: {isNavOpen}");
    isNavOpen = !isNavOpen;
    Console.WriteLine($"New state: {isNavOpen}");
    StateHasChanged(); // Force re-render
  }

  public void Dispose()
  {
    // Unsubscribe from events to prevent memory leaks
    Navigation.LocationChanged -= OnLocationChanged;
    objRef?.Dispose();
  }

}
@page "/pggm-input"

<PageTitle>PGGM Input</PageTitle>

<PggmHeader Level="1">PGGM Input</PggmHeader>

<p class="lead">
    This page demonstrates the PggmInput component, which is a wrapper for the pggm-input web component
    using the custom built-in element pattern <code>&lt;input is="pggm-input" /&gt;</code>.
</p>

<div class="row">
    <div class="col-md-6">
        <PggmHeader Level="2">Basic Input Examples</PggmHeader>
        
        <div class="mb-3">
            <PggmLabel For="text-input" class="form-label">Text Input</PggmLabel>
            <PggmInput @bind-value="_textValue" 
                          id="text-input"
                       Type="@PggmInput.InputTypes.Text"
                       Name="text-input"
                       Placeholder="Enter some text..."
                       OnChange="OnTextChanged" />
            <small class="form-text text-muted">Current value: @_textValue</small>
        </div>

        <div class="mb-3">
            <PggmLabel For="email-input" class="form-label">Email Input</PggmLabel>
            <PggmInput @bind-value="_emailValue" 
                          id="email-input"
                       Type="@PggmInput.InputTypes.Email"
                       Name="email-input"
                       Placeholder="Enter your email..."
                       Required="true" />
            <small class="form-text text-muted">Current value: @_emailValue</small>
        </div>

        <div class="mb-3">
            <PggmLabel For="password-input" class="form-label">Password Input</PggmLabel>
            <PggmInput @bind-value="_passwordValue" 
                          id="password-input"
                       Type="@PggmInput.InputTypes.Password"
                       Name="password-input"
                       Placeholder="Enter password..."
                       MinLength="8" />
            <small class="form-text text-muted">Minimum 8 characters</small>
        </div>

        <div class="mb-3">
            <PggmLabel For="number-input" class="form-label">Number Input</PggmLabel>
            <PggmInput @bind-value="_numberValue" 
                          id="number-input"
                       Type="@PggmInput.InputTypes.Number"
                       Name="number-input"
                       Min="0"
                       Max="100"
                       Step="1"
                       Placeholder="Enter a number..." />
            <small class="form-text text-muted">Range: 0-100, Current value: @_numberValue</small>
        </div>

        
    </div>

    <div class="col-md-6">
        <PggmHeader Level="2">Advanced Input Examples</PggmHeader>
        
        <div class="mb-3">
            <PggmLabel For="search-input" class="form-label">Search Input</PggmLabel>
            <PggmInput @bind-Value="_searchValue" 
                          id="search-input"
                       Type="@PggmInput.InputTypes.Search"
                       Name="search-input"
                       Placeholder="Search..."
                       OnInput="OnSearchInput" />
            <small class="form-text text-muted">Live search: @_searchValue</small>
        </div>

        <div class="mb-3">
            <PggmLabel For="url-input" class="form-label">URL Input</PggmLabel>
            <PggmInput @bind-Value="_urlValue" 
                          id="url-input"
                       Type="@PggmInput.InputTypes.Url"
                       Name="url-input"
                       Placeholder="https://example.com" />
            <small class="form-text text-muted">Current URL: @_urlValue</small>
        </div>

    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <PggmHeader Level="2">Input States</PggmHeader>
        
        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <PggmLabel class="form-label">Disabled Input</PggmLabel>
                    <PggmInput Value="This input is disabled" 
                               Disabled="true"
                               Placeholder="Disabled input" />
                </div>
            </div>

            <div class="col-md-4">
                <div class="mb-3">
                    <PggmLabel class="form-label">Required Input</PggmLabel>
                    <PggmInput @bind-Value="_requiredValue" 
                                 Name="required-input"
                               Required="true"
                               Placeholder="This field is required" />
                    @if (string.IsNullOrEmpty(_requiredValue))
                    {
                        <small class="text-danger">This field is required</small>
                    }
                </div>
            </div>

            <div class="col-md-4">
                <div class="mb-3">
                    <PggmLabel class="form-label">Read-only Input</PggmLabel>
                    <PggmInput Value="This input is read-only" 
                               ReadOnly="true" />
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <PggmHeader Level="2">Event Handling Example</PggmHeader>
        
        <div class="mb-3">
            <PggmLabel For="event-input" class="form-label">Event Demo Input</PggmLabel>
            <PggmInput @bind-Value="_eventValue" 
                       Name="event-input"
                          id="event-input"
                       Placeholder="Type here to see events..."
                       OnChange="OnEventChange"
                       OnInput="OnEventInput"
                       OnFocus="OnEventFocus"
                       OnBlur="OnEventBlur" />
        </div>

        <div class="card">
            <div class="card-header">
                <h5>Event Log</h5>
            </div>
            <div class="card-body">
                <div style="height: 200px; overflow-y: auto; font-family: monospace; font-size: 0.875rem;">
                    @foreach (var logEntry in _eventLog.AsEnumerable().Reverse().Take(20))
                    {
                        <div class="mb-1">
                            <span class="text-muted">[@logEntry.Timestamp.ToString("HH:mm:ss.fff")]</span>
                            <span class="fw-bold text-primary">@logEntry.Event:</span>
                            @logEntry.Details
                        </div>
                    }
                </div>
                @if (_eventLog.Count > 20)
                {
                    <small class="text-muted">Showing last 20 of @_eventLog.Count events</small>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // Basic input values
    private string? _textValue = "";
    private string? _emailValue = "";
    private string? _passwordValue = "";
    private string? _numberValue = "";
    private string? _telValue = "";
    
    // Advanced input values
    private string? _searchValue = "";
    private string? _urlValue = "";
    private string? _dateValue = "";
    private string? _timeValue = "";
    private string? _colorValue = "#ff0000";
    
    // State examples
    private string? _requiredValue = "";
    
    // Event demo
    private string? _eventValue = "";
    private readonly List<EventLogEntry> _eventLog = new();

    private void OnTextChanged(ChangeEventArgs args)
    {
        LogEvent("Text Change", $"New value: '{args.Value}'");
    }

    private void OnSearchInput(ChangeEventArgs args)
    {
        LogEvent("Search Input", $"Live search: '{args.Value}'");
    }

    private void OnEventChange(ChangeEventArgs args)
    {
        LogEvent("Change Event", $"Value changed to: '{args.Value}'");
    }

    private void OnEventInput(ChangeEventArgs args)
    {
        LogEvent("Input Event", $"Input value: '{args.Value}'");
    }

    private void OnEventFocus(FocusEventArgs args)
    {
        LogEvent("Focus Event", "Input gained focus");
    }

    private void OnEventBlur(FocusEventArgs args)
    {
        LogEvent("Blur Event", "Input lost focus");
    }

    private void LogEvent(string eventName, string details)
    {
        _eventLog.Add(new EventLogEntry
        {
            Timestamp = DateTime.Now,
            Event = eventName,
            Details = details
        });
        
        // Keep only last 100 events to prevent memory issues
        if (_eventLog.Count > 100)
        {
            _eventLog.RemoveAt(0);
        }
        
        StateHasChanged();
    }

    public class EventLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Event { get; set; } = string.Empty;
        public string Details { get; set; } = string.Empty;
    }
}

@page "/pggm-input-date"

<PageTitle>PGGM Input Date</PageTitle>

<PggmHeader Level="1">PGGM Input Date</PggmHeader>

<p>This page demonstrates the PGGM Input Date component with various configurations and features.</p>

<div class="demo-section">
    <PggmHeader Level="2">Basic Date Input</PggmHeader>
    <p>Basic date input with dd-mm-yyyy format</p>
    
    <PggmInputDate @bind-value="basicDate" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="basic-date"
                   Required="true" />
    
    <p><strong>Current Value:</strong> @basicDate</p>
</div>

<div class="demo-section">
    <PggmHeader Level="2">Date Range (Period) Input</PggmHeader>
    <p>Date input with period enabled for date ranges</p>
    
    <PggmInputDate @bind-value="periodDate" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="period-date"
                   Period="true"
                   Required="true" />
    
    <p><strong>Current Value:</strong> @periodDate</p>
</div>

<div class="demo-section">
    <PggmHeader Level="2">Date Input with Min/Max</PggmHeader>
    <p>Date input with minimum and maximum date restrictions</p>
    
    <PggmInputDate @bind-value="restrictedDate" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="restricted-date"
                   Min="2024-01-01"
                   Max="2024-12-31"
                   Required="true" />
    
    <p><strong>Current Value:</strong> @restrictedDate</p>
    <p><em>Only dates between 01-01-2024 and 31-12-2024 are allowed</em></p>
</div>

<div class="demo-section">
    <PggmHeader Level="2">Different Date Formats</PggmHeader>
    
    <PggmHeader Level="3">US Format (mm-dd-yyyy)</PggmHeader>
    <PggmInputDate @bind-value="usDate" 
                   Format="@PggmInputDate.DateFormats.MonthDayYear"
                   Name="us-date" />
    <p><strong>Current Value:</strong> @usDate</p>
    
    <PggmHeader Level="3">ISO Format (yyyy-mm-dd)</PggmHeader>
    <PggmInputDate @bind-value="isoDate" 
                   Format="@PggmInputDate.DateFormats.YearMonthDay"
                   Name="iso-date" />
    <p><strong>Current Value:</strong> @isoDate</p>
</div>

<div class="demo-section">
    <PggmHeader Level="2">Disabled and ReadOnly States</PggmHeader>
    
    <PggmHeader Level="3">Disabled</PggmHeader>
    <PggmInputDate Value="15-03-2024" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="disabled-date"
                   Disabled="true" />
    
    <PggmHeader Level="3">ReadOnly</PggmHeader>
    <PggmInputDate Value="20-03-2024" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="readonly-date"
                   ReadOnly="true" />
</div>

<div class="demo-section">
    <PggmHeader Level="2">Event Handling</PggmHeader>
    <p>Date input with event handlers</p>
    
    <PggmInputDate @bind-Value="eventDate" 
                   Format="@PggmInputDate.DateFormats.DayMonthYear"
                   Name="event-date"
                   OnChange="OnDateChange"
                   OnFocus="OnDateFocus"
                   OnBlur="OnDateBlur" />
    
    <p><strong>Current Value:</strong> @eventDate</p>
    
    <PggmHeader Level="3">Event Log:</PggmHeader>
    <div class="event-log">
        @foreach (var logEntry in eventLog)
        {
            <div>@logEntry</div>
        }
    </div>
</div>

@code {
    private string? basicDate = "";
    private string? periodDate = "";
    private string? restrictedDate = "";
    private string? usDate = "";
    private string? isoDate = "";
    private string? eventDate = "";
    
    private List<string> eventLog = new();

    private void OnDateChange(ChangeEventArgs args)
    {
        eventLog.Insert(0, $"[{DateTime.Now:HH:mm:ss}] Change: {args.Value}");
        if (eventLog.Count > 10) eventLog.RemoveAt(10);
    }

    private void OnDateFocus(FocusEventArgs args)
    {
        eventLog.Insert(0, $"[{DateTime.Now:HH:mm:ss}] Focus gained");
        if (eventLog.Count > 10) eventLog.RemoveAt(10);
    }

    private void OnDateBlur(FocusEventArgs args)
    {
        eventLog.Insert(0, $"[{DateTime.Now:HH:mm:ss}] Focus lost");
        if (eventLog.Count > 10) eventLog.RemoveAt(10);
    }
}

<style>
    .demo-section {
        margin-bottom: 2rem;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
    }
    
    .demo-section h2 {
        margin-top: 0;
        color: #333;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 0.5rem;
    }
    
    .demo-section h3 {
        margin-top: 1.5rem;
        color: #666;
    }
    
    .event-log {
        background-color: #f5f5f5;
        padding: 1rem;
        border-radius: 4px;
        font-family: monospace;
        font-size: 0.9rem;
        max-height: 200px;
        overflow-y: auto;
    }
    
    .event-log div {
        margin-bottom: 0.25rem;
    }
    
   
</style>

@page "/pggm-error-message"
@using Blazor.Pggm.Components

<h1>PGGM Error Message Component Demo</h1>

<div class="demo-section">
  <h2>Basic Error Messages</h2>

  <div class="demo-item">
    <h3>Error Message Associated with Input Field</h3>
    <PggmLabel For="sample-input">Sample Input:</PggmLabel>
    <PggmErrorMessage For="sample-input" Validity="@PggmErrorMessage.ValidityStates.ValueMissing">
      This field is required.
    </PggmErrorMessage>
    <PggmInput required id="sample-input" />
  </div>

  <div class="demo-item">
    <h3>Multiple Validity States</h3>
    <PggmLabel For="multi-input">Multi-validation Input:</PggmLabel>
    <PggmErrorMessage For="multi-input"
      Validity="@($"{PggmErrorMessage.ValidityStates.ValueMissing} {PggmErrorMessage.ValidityStates.PatternMismatch}")">
      This field is required and must match the specified pattern. (Starts with 'P')
    </PggmErrorMessage>
    <PggmInput Required="true" Pattern="^P.*" id="multi-input" />
  </div>
</div>

<div class="demo-section">
  <h2>Form Validation Examples</h2>

  <div class="demo-item">
    <h3>Email Validation</h3>
    <PggmLabel For="email-input">Email Address:</PggmLabel>
    @if (!string.IsNullOrEmpty(emailValidityState))
    {
      <PggmErrorMessage For="email-input" Validity="@emailValidityState">
        @GetEmailErrorMessage()
      </PggmErrorMessage>
    }
    <PggmInput @bind-Value="formModel.Email" OnBlur="ValidateEmail" id="email-input" Type="email"
      Placeholder="Enter your email" />
  </div>

  <div class="demo-item">
    <h3>Password Validation</h3>
    <PggmLabel For="password-input">Password (min 8 characters):</PggmLabel>
    @if (!string.IsNullOrEmpty(passwordValidityState))
    {
      <PggmErrorMessage For="password-input" Validity="@passwordValidityState">
        @GetPasswordErrorMessage()
      </PggmErrorMessage>
    }
    <PggmInput @bind-Value="formModel.Password" OnBlur="ValidatePassword" id="password-input" Type="password"
      MinLength="8" Placeholder="Enter password" />
  </div>

  <div class="demo-item">
    <h3>Number Range Validation</h3>
    <PggmLabel For="age-input">Age (18-100):</PggmLabel>
    @if (!string.IsNullOrEmpty(ageValidityState))
    {
      <PggmErrorMessage For="age-input" Validity="@ageValidityState">
        @GetAgeErrorMessage()
      </PggmErrorMessage>
    }
    <PggmInput @bind-Value="ageValue" OnBlur="ValidateAge" id="age-input" Type="number" Min="18" Max="100"
      Placeholder="Enter your age" />
  </div>
</div>

<div class="demo-section">
  <h2>All Validity States Examples</h2>

  <div class="demo-item">
    <h3>Pattern Mismatch</h3>
    <PggmLabel For="pattern-input">Phone Number (format: 123-456-7890):</PggmLabel>
    <PggmErrorMessage For="pattern-input" Validity="@PggmErrorMessage.ValidityStates.PatternMismatch">
      Please enter a valid phone number in the format 123-456-7890.
    </PggmErrorMessage>
    <PggmInput id="pattern-input" Pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" Placeholder="123-456-7890" />
  </div>

  <div class="demo-item">
    <h3>Too Long / Too Short</h3>
    <PggmLabel For="length-input">Username (5-15 characters):</PggmLabel>
    <PggmErrorMessage For="length-input" Validity="@PggmErrorMessage.ValidityStates.TooShort">
      Username must be at least 5 characters long.
    </PggmErrorMessage>
    <PggmErrorMessage For="length-input" Validity="@PggmErrorMessage.ValidityStates.TooLong">
      Username cannot be longer than 15 characters.
    </PggmErrorMessage>
    <PggmInput id="length-input" MinLength="5" MaxLength="15" Placeholder="Enter username" />
  </div>

  <div class="demo-item">
    <h3>Step Mismatch</h3>
    <PggmLabel For="step-input">Price (increments of 0.50):</PggmLabel>
    <PggmErrorMessage For="step-input" Validity="@PggmErrorMessage.ValidityStates.StepMismatch">
      Price must be in increments of $0.50.
    </PggmErrorMessage>
    <PggmInput id="step-input" Type="number" Step="0.5" Placeholder="0.00" />
  </div>

  <div class="demo-item">
    <h3>Custom Error</h3>
    <PggmLabel For="custom-input">Custom Validation:</PggmLabel>
    @if (showCustomError)
    {
      <PggmErrorMessage For="custom-input" Validity="@PggmErrorMessage.ValidityStates.CustomError">
        This value is not allowed by our business rules.
      </PggmErrorMessage>
    }
    <PggmInput @bind-Value="customValue" OnBlur="ValidateCustom" id="custom-input"
      Placeholder="Type 'forbidden' to see custom error" />
  </div>
</div>

<div class="demo-section">
  <h2>Interactive Controls</h2>

  <div class="demo-item">
    <button type="button" class="btn btn-primary" @onclick="ClearAllErrors">Clear All Errors</button>
    <button type="button" class="btn btn-secondary" @onclick="ShowAllErrors">Show All Errors</button>
  </div>
</div>

@code {
  private FormModel formModel = new();
  private string emailValidityState = "";
  private string passwordValidityState = "";
  private string ageValidityState = "";
  private string customValue = "";
  private bool showCustomError = false;
  private string ageValue = "";

  private void ValidateEmail()
  {
    emailValidityState = "";

    if (string.IsNullOrEmpty(formModel.Email))
    {
      emailValidityState = PggmErrorMessage.ValidityStates.ValueMissing;
    }
    else if (!formModel.Email.Contains("@"))
    {
      emailValidityState = PggmErrorMessage.ValidityStates.TypeMismatch;
    }
  }

  private void ValidatePassword()
  {
    passwordValidityState = "";

    if (string.IsNullOrEmpty(formModel.Password))
    {
      passwordValidityState = PggmErrorMessage.ValidityStates.ValueMissing;
    }
    else if (formModel.Password.Length < 8)
    {
      passwordValidityState = PggmErrorMessage.ValidityStates.TooShort;
    }
  }

  private void ValidateAge()
  {
    ageValidityState = "";

    if (string.IsNullOrEmpty(ageValue))
    {
      ageValidityState = PggmErrorMessage.ValidityStates.ValueMissing;
      formModel.Age = null;
    }
    else if (int.TryParse(ageValue, out int age))
    {
      formModel.Age = age;
      if (age < 18)
      {
        ageValidityState = PggmErrorMessage.ValidityStates.RangeUnderflow;
      }
      else if (age > 100)
      {
        ageValidityState = PggmErrorMessage.ValidityStates.RangeOverflow;
      }
    }
    else
    {
      ageValidityState = PggmErrorMessage.ValidityStates.BadInput;
      formModel.Age = null;
    }
  }

  private void ValidateCustom()
  {
    showCustomError = customValue?.ToLower() == "forbidden";
  }

  private string GetEmailErrorMessage()
  {
    return emailValidityState switch
    {
      var state when state == PggmErrorMessage.ValidityStates.ValueMissing => "Email address is required.",
      var state when state == PggmErrorMessage.ValidityStates.TypeMismatch => "Please enter a valid email address.",
      _ => ""
    };
  }

  private string GetPasswordErrorMessage()
  {
    return passwordValidityState switch
    {
      var state when state == PggmErrorMessage.ValidityStates.ValueMissing => "Password is required.",
      var state when state == PggmErrorMessage.ValidityStates.TooShort => "Password must be at least 8 characters long.",
      _ => ""
    };
  }

  private string GetAgeErrorMessage()
  {
    return ageValidityState switch
    {
      var state when state == PggmErrorMessage.ValidityStates.ValueMissing => "Age is required.",
      var state when state == PggmErrorMessage.ValidityStates.RangeUnderflow => "You must be at least 18 years old.",
      var state when state == PggmErrorMessage.ValidityStates.RangeOverflow => "Please enter a valid age.",
      _ => ""
    };
  }

  private void ClearAllErrors()
  {
    emailValidityState = "";
    passwordValidityState = "";
    ageValidityState = "";
    showCustomError = false;
  }

  private void ShowAllErrors()
  {
    emailValidityState = PggmErrorMessage.ValidityStates.ValueMissing;
    passwordValidityState = PggmErrorMessage.ValidityStates.TooShort;
    ageValidityState = PggmErrorMessage.ValidityStates.RangeUnderflow;
    showCustomError = true;
  }

  public class FormModel
  {
    public string Email { get; set; } = "";
    public string Password { get; set; } = "";
    public int? Age { get; set; }
  }
}

<style>
  .demo-section {
    margin-bottom: 2rem;
    padding: 1rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
  }

  .demo-item {
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: #f9f9f9;
    border-radius: 4px;
  }

  .demo-item h3 {
    margin-top: 0;
    color: #333;
    font-size: 1.1rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }

  pggm-error-message:has(+input[is]) {
    margin-bottom: .5em;
  }
  
  .btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-right: 0.5rem;
  }

  .btn-primary {
    background-color: #007bff;
    color: white;
  }

  .btn-secondary {
    background-color: #6c757d;
    color: white;
  }

  .btn:hover {
    opacity: 0.9;
  }
</style>

@using System.Text.Json
@inherits PggmEventComponentBase
@namespace Blazor.Pggm.Components

<pggm-switch @ref="ElementRef" @attributes="GetAttributes()">
  @ChildContent
</pggm-switch>

@code {
  protected override string TagName => "pggm-switch";

  /// <summary>
  /// Whether the switch is checked/on
  /// </summary>
  [Parameter] public bool Checked { get; set; }

  /// <summary>
  /// Whether the switch is disabled
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// Whether the switch is required
  /// </summary>
  [Parameter] public bool Required { get; set; }

  /// <summary>
  /// The name attribute for the switch input
  /// </summary>
  [Parameter] public string? Name { get; set; }

  /// <summary>
  /// The value attribute for the switch input
  /// </summary>
  [Parameter] public string? Value { get; set; }

  /// <summary>
  /// The variant/appearance of the switch
  /// </summary>
  [Parameter] public string? Variant { get; set; }

  /// <summary>
  /// Event callback for when the switch state changes
  /// </summary>
  [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

  /// <summary>
  /// Event callback for when the switch is toggled with its value
  /// </summary>
  [Parameter] public EventCallback<string?> ValueChanged { get; set; }

  /// <summary>
  /// Event callback for the change event
  /// </summary>
  [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

  /// <summary>
  /// Event callback for the focus event
  /// </summary>
  [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }

  /// <summary>
  /// Event callback for the blur event
  /// </summary>
  [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

  protected override Dictionary<string, Func<object?, Task>> EventHandlers => new()
  {
    ["change"] = HandleChangeEventAsync,
    ["focus"] = HandleFocusEventAsync,
    ["blur"] = HandleBlurEventAsync
  };

  protected override IEnumerable<string> GetEventNames()
  {
    return new[] { "change", "focus", "blur" };
  }

  private async Task HandleChangeEventAsync(object? eventData)
  {
    if (eventData is JsonElement jsonElement && jsonElement.TryGetProperty("checked", out var checkedProp))
    {
      var isChecked = checkedProp.GetBoolean();
      var oldValue = Checked;
      
      // Only proceed if the value actually changed
      if (oldValue != isChecked)
      {
        Checked = isChecked;
        
        await InvokeAsync(async () =>
        {
          if (CheckedChanged.HasDelegate)
          {
            await CheckedChanged.InvokeAsync(Checked);
          }
          
          if (ValueChanged.HasDelegate)
          {
            await ValueChanged.InvokeAsync(isChecked ? Value : null);
          }
          
          if (OnChange.HasDelegate)
          {
            var changeArgs = new ChangeEventArgs
            {
              Value = isChecked
            };
            await OnChange.InvokeAsync(changeArgs);
          }
          
          StateHasChanged();
        });
      }
    }
  }

  private async Task HandleFocusEventAsync(object? eventData)
  {
    if (OnFocus.HasDelegate)
    {
      await InvokeAsync(async () =>
      {
        var focusArgs = new FocusEventArgs();
        await OnFocus.InvokeAsync(focusArgs);
      });
    }
  }

  private async Task HandleBlurEventAsync(object? eventData)
  {
    if (OnBlur.HasDelegate)
    {
      await InvokeAsync(async () =>
      {
        var focusArgs = new FocusEventArgs();
        await OnBlur.InvokeAsync(focusArgs);
      });
    }
  }

  protected override void AddComponentAttributes(Dictionary<string, object> attributes)
  {
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Disabled, Disabled);
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Required, Required);
    AttributeHelper.SetBooleanAttribute(attributes, "checked", Checked);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Name, Name);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Value, Value);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, "variant", Variant);
  }
}
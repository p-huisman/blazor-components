@inherits PggmEventComponentBase
@namespace Pggm.Components

<pggm-radio @ref="ElementRef" @attributes="GetAttributes()">
  @ChildContent
  @if (!string.IsNullOrEmpty(Description))
  {
    <span slot="description">@Description</span>
  }
</pggm-radio>

@code {
  protected override string TagName => "pggm-radio";

  /// <summary>
  /// Whether the radio button is checked
  /// </summary>
  [Parameter] public bool Checked { get; set; }

  /// <summary>
  /// Whether the radio button is disabled
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// Whether the radio button is required
  /// </summary>
  [Parameter] public bool Required { get; set; }

  /// <summary>
  /// The name attribute for the radio button group
  /// Radio buttons with the same name form a group
  /// </summary>
  [Parameter] public string? Name { get; set; }

  /// <summary>
  /// The value attribute for the radio button
  /// </summary>
  [Parameter] public string? Value { get; set; }

  /// <summary>
  /// Description text to show below the radio button label
  /// </summary>
  [Parameter] public string? Description { get; set; }

  /// <summary>
  /// Event callback for when the radio button state changes
  /// </summary>
  [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

  /// <summary>
  /// Event callback for when the radio button is selected with its value
  /// </summary>
  [Parameter] public EventCallback<string?> ValueChanged { get; set; }

  /// <summary>
  /// Event callback for the change event
  /// </summary>
  [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

  protected override Dictionary<string, Func<object?, Task>> EventHandlers => new()
  {
    ["change"] = async (eventData) => {
      // Get the checked state from the element
      var isChecked = await JSRuntime.InvokeAsync<bool>("PggmComponents.getProperty", ElementRef, "checked");
      var oldValue = Checked;
      
      // Only proceed if the value actually changed
      if (oldValue != isChecked)
      {
        Checked = isChecked;
        
        // Use InvokeAsync to ensure we're on the proper thread
        await InvokeAsync(async () =>
        {
          if (CheckedChanged.HasDelegate)
          {
            await CheckedChanged.InvokeAsync(Checked);
          }
          
          if (ValueChanged.HasDelegate && isChecked)
          {
            await ValueChanged.InvokeAsync(Value);
          }
          
          if (OnChange.HasDelegate)
          {
            var changeArgs = new ChangeEventArgs
            {
              Value = isChecked ? Value : null
            };
            await OnChange.InvokeAsync(changeArgs);
          }
          
          StateHasChanged();
        });
      }
    }
  };

  protected override IEnumerable<string> GetEventNames()
  {
    if (CheckedChanged.HasDelegate || ValueChanged.HasDelegate || OnChange.HasDelegate)
    {
      yield return "change";
    }
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    
    if (!firstRender)
    {
      // Sync checked state after parameter changes
      await SyncCheckedStateAsync();
    }
  }

  protected override async Task InitializeWebComponentAsync()
  {
    await base.InitializeWebComponentAsync();
    
    // Sync the initial checked state with the web component
    await SyncCheckedStateAsync();
  }

  private async Task SyncCheckedStateAsync()
  {
    try
    {
      await JSRuntime.InvokeVoidAsync("PggmComponents.setProperty", ElementRef, "checked", Checked);
    }
    catch (Exception)
    {
      // Ignore JavaScript errors during sync
    }
  }

  protected override void AddComponentAttributes(Dictionary<string, object> attributes)
  {
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Disabled, Disabled);
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Required, Required);
    AttributeHelper.SetBooleanAttribute(attributes, "checked", Checked);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Name, Name);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Value, Value);
  }
}
@using System.Text.Json
@using Microsoft.JSInterop
@inherits PggmEventComponentBase
@namespace Pggm.Components

<pggm-switch @ref="ElementRef" @attributes="GetAttributes()">
  @ChildContent
</pggm-switch>

@code {
  protected override string TagName => "pggm-switch";

  /// <summary>
  /// Whether the switch is checked/on
  /// </summary>
  [Parameter] public bool Checked { get; set; }

  /// <summary>
  /// Whether the switch is disabled
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// The value attribute for the switch input
  /// </summary>
  [Parameter] public string? Value { get; set; }

  /// <summary>
  /// Event callback for when the switch state changes
  /// </summary>
  [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

  /// <summary>
  /// Event callback for when the switch is toggled with its value
  /// </summary>
  [Parameter] public EventCallback<string?> ValueChanged { get; set; }

  /// <summary>
  /// Event callback for the change event
  /// </summary>
  [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

  /// <summary>
  /// Event callback for the focus event
  /// </summary>
  [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }

  /// <summary>
  /// Event callback for the blur event
  /// </summary>
  [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

  private async Task HandleChangeEventAsync(object? eventData)
  {
    bool? isChecked = null;

    // Try multiple approaches to extract the checked state
    if (eventData is JsonElement jsonElement)
    {
      // Approach 1: Direct checked property
      if (jsonElement.TryGetProperty("checked", out var checkedProp))
      {
        isChecked = checkedProp.GetBoolean();
      }
      // Approach 2: Target element checked property
      else if (jsonElement.TryGetProperty("target", out var targetProp) && 
               targetProp.TryGetProperty("checked", out var targetCheckedProp))
      {
        isChecked = targetCheckedProp.GetBoolean();
      }
      // Approach 3: Detail object checked property
      else if (jsonElement.TryGetProperty("detail", out var detailProp) &&
               detailProp.TryGetProperty("checked", out var detailCheckedProp))
      {
        isChecked = detailCheckedProp.GetBoolean();
      }
      // Approach 4: Value property as boolean
      else if (jsonElement.TryGetProperty("value", out var valueProp))
      {
        if (valueProp.ValueKind == JsonValueKind.True)
          isChecked = true;
        else if (valueProp.ValueKind == JsonValueKind.False)
          isChecked = false;
      }
      // Approach 5: Direct boolean value
      else if (jsonElement.ValueKind == JsonValueKind.True)
      {
        isChecked = true;
      }
      else if (jsonElement.ValueKind == JsonValueKind.False)
      {
        isChecked = false;
      }
    }
    else if (eventData is bool boolValue)
    {
      isChecked = boolValue;
    }

    // If we couldn't extract a boolean value, toggle the current state
    if (!isChecked.HasValue)
    {
      isChecked = !Checked;
    }

    // Always invoke callbacks to ensure the parent component updates
    await InvokeAsync(async () =>
    {
      if (CheckedChanged.HasDelegate)
      {
        await CheckedChanged.InvokeAsync(isChecked.Value);
      }
      
      if (ValueChanged.HasDelegate)
      {
        await ValueChanged.InvokeAsync(isChecked.Value ? Value : null);
      }
      
      if (OnChange.HasDelegate)
      {
        var changeArgs = new ChangeEventArgs
        {
          Value = isChecked.Value
        };
        await OnChange.InvokeAsync(changeArgs);
      }
    });
  }

  protected override Dictionary<string, Func<object?, Task>> EventHandlers => new()
  {
    ["change"] = HandleChangeEventAsync,
    ["focus"] = HandleFocusEventAsync,
    ["blur"] = HandleBlurEventAsync
  };

  protected override IEnumerable<string> GetEventNames()
  {
    return new[] { "change", "focus", "blur" };
  }

  private async Task HandleFocusEventAsync(object? eventData)
  {
    if (OnFocus.HasDelegate)
    {
      await InvokeAsync(async () =>
      {
        var focusArgs = new FocusEventArgs();
        await OnFocus.InvokeAsync(focusArgs);
      });
    }
  }

  private async Task HandleBlurEventAsync(object? eventData)
  {
    if (OnBlur.HasDelegate)
    {
      await InvokeAsync(async () =>
      {
        var focusArgs = new FocusEventArgs();
        await OnBlur.InvokeAsync(focusArgs);
      });
    }
  }

  protected override void AddComponentAttributes(Dictionary<string, object> attributes)
  {
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Disabled, Disabled);
    AttributeHelper.SetBooleanAttribute(attributes, "checked", Checked);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Value, Value);
  }
}
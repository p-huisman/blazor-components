@inherits PggmEventComponentBase
@namespace Pggm.Components

<pggm-checkbox @ref="ElementRef" @attributes="GetAttributes()">
  @ChildContent
  @if (!string.IsNullOrEmpty(Description))
  {
    <span slot="description">@Description</span>
  }
</pggm-checkbox>

@code {
  public override string TagName => "pggm-checkbox";

  /// <summary>
  /// Whether the checkbox is checked
  /// </summary>
  [Parameter] public bool Checked { get; set; }

  /// <summary>
  /// Whether the checkbox is disabled
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// Whether the checkbox is required
  /// </summary>
  [Parameter] public bool Required { get; set; }

  /// <summary>
  /// Whether the checkbox is in an indeterminate state
  /// </summary>
  [Parameter] public bool Indeterminate { get; set; }

  /// <summary>
  /// The name attribute for the checkbox input
  /// </summary>
  [Parameter] public string? Name { get; set; }

  /// <summary>
  /// The value attribute for the checkbox input
  /// </summary>
  [Parameter] public string? Value { get; set; }

  /// <summary>
  /// Description text to show below the checkbox label
  /// </summary>
  [Parameter] public string? Description { get; set; }

  /// <summary>
  /// Event callback for when the checkbox state changes
  /// </summary>
  [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

  /// <summary>
  /// Event callback for the change event
  /// </summary>
  [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

  protected override IEnumerable<string> GetEventNames()
  {
    if (CheckedChanged.HasDelegate || OnChange.HasDelegate)
    {
      yield return "change";
    }
  }

  protected override Dictionary<string, Func<object?, Task>> EventHandlers => new()
  {
    ["change"] = async (eventData) => {
      // Get the checked state from the element
      var isChecked = await JSRuntime.InvokeAsync<bool>("PggmComponents.getProperty", ElementRef, "checked");
      var oldValue = Checked;
      
      // Only proceed if the value actually changed
      if (oldValue != isChecked)
      {
        Checked = isChecked;
        
        // Use InvokeAsync to ensure we're on the proper thread
        await InvokeAsync(async () =>
        {
          if (CheckedChanged.HasDelegate)
          {
            await CheckedChanged.InvokeAsync(Checked);
          }
          
          if (OnChange.HasDelegate)
          {
            var changeArgs = new ChangeEventArgs
            {
              Value = isChecked
            };
            await OnChange.InvokeAsync(changeArgs);
          }
          
          StateHasChanged();
        });
      }
    }
  };

  protected override void AddComponentAttributes(Dictionary<string, object> attributes)
  {
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Disabled, Disabled);
    AttributeHelper.SetBooleanAttribute(attributes, Constants.AttributeNames.Required, Required);
    AttributeHelper.SetBooleanAttribute(attributes, "checked", Checked);
    AttributeHelper.SetBooleanAttribute(attributes, "indeterminate", Indeterminate);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Name, Name);
    AttributeHelper.SetAttributeIfNotEmpty(attributes, Constants.AttributeNames.Value, Value);
  }
}